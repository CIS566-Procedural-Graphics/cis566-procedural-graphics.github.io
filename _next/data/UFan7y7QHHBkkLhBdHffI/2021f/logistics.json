{"pageProps":{"content":"<h1>Logistics</h1>\n<p>Class is Monday and Wednesdays 7-8:30 pm.</p>\n<p>Mondays are lectures. Wednesdays are labs. Please attend class in person and bring laptops to lab section. Contact instructors if you don’t have a laptop to bring</p>\n<p>All lectures and labs and office hours will also be virtual. Join at <a href=\"https://upenn.zoom.us/j/95081002092\">https://upenn.zoom.us/j/95081002092</a>.</p>\n<h2>Office Hours</h2>\n<ul>\n<li>Monday: 10-11 am (Hannah), 9-10 pm (Gary), </li>\n<li>Tuesday: 3-6 (Ruth in the SIGLAB)</li>\n<li>Wednesday: 330-5 (Nathan in the SIGLAB), 4-5 (Adam) </li>\n<li>Thursday: 2-330 (Nathan in the SIGLAB)</li>\n<li>Friday: 11-12 am (Rachel)</li>\n</ul>\n<p>All office hours will be available remotely here:\nVideo call link: https://meet.google.com/vvo-mpbt-bcg</p>\n<h2>Contact</h2>\n<ul>\n<li>Rachel Hwang (rah1@uchicago.edu)</li>\n<li>Adam Mally (amally@seas.upenn.edu)</li>\n</ul>\n<h2>Schedule</h2>\n<p>(Subject to change)</p>\n<ul>\n<li>Week 1: <a href=\"/What%20is%20proceduralism_.pdf\">What is Proceduralism?</a></li>\n<li>Week 2: <a href=\"/noise-2021.pdf\">Noise</a></li>\n<li>Week 3: <a href=\"/toolbox_functions.pdf\">Toolbox methods</a></li>\n<li>Week 4: <a href=\"/color.pdf\">Color</a></li>\n<li>Week 5: <a href=\"/implicit_surfaces.pdf\">Implicit Surfaces</a></li>\n<li>Week 6: Procedural Characters</li>\n<li>Week 7: L-systems</li>\n<li>Week 8: Shape Grammars</li>\n<li>Week 9: Houdini</li>\n<li>Week 10: Procedural Levels</li>\n<li>Week 11: Special topics</li>\n<li>Week 12: Special Topics</li>\n<li>Week 13: Special Topics</li>\n<li>Week 14: Final Project</li>\n</ul>","frontmatter":{"title":"Logistics"},"navLinks":[{"title":"Assignments","dir":"assignments","pages":[{"slug":"hw00-webgl-intro","frontmatter":{"type":"link","title":"HW 0: Noisy Planet Part 1","href":"https://github.com/CIS-566-Fall-2021/hw00-webgl-intro","rank":0},"content":""},{"slug":"hw01-noisy-planet","frontmatter":{"type":"link","title":"HW 1: Noisy Planet Part 2","href":"https://github.com/CIS-566-Fall-2021/hw01-noisy-planet","rank":1},"content":""}]},{"title":"Resources","dir":"resources","pages":[{"slug":"javascript-basics","frontmatter":{"title":"Javascript Basics","rank":1},"content":"<link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.9.0/styles/darcula.min.css\"/>\n<h1>Objects</h1>\n<p>In Javascript, everything (as long as it&#x27;s not a primitive like a string or a number), is an Object. And by that, I don&#x27;t mean typical objects in object-oriented languages. Everything is a set of key-value pairs which we typically call &quot;properties&quot;. For example:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> a = {};                 <span class=\"hljs-comment\">// `a` is an empty object</span>\n<span class=\"hljs-keyword\">var</span> b = {                   <span class=\"hljs-comment\">// `b` is an object with two properties</span>\n  <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">2</span>,                 <span class=\"hljs-comment\">// `b.value` points to a number</span>\n  <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-string\">&quot;bar&quot;</span>                <span class=\"hljs-comment\">// `b.foo` points to a string</span>\n}\n</code></pre>\n<p>We can access any property using <code>object.property</code> syntax, or by fetching the property by name: <code>object[&quot;property&quot;]</code>.</p>\n<p>We can modify properties at any time and even add new properties to existing objects.</p>\n<pre><code class=\"hljs language-js\">b[<span class=\"hljs-string\">&quot;name&quot;</span>] = <span class=\"hljs-string\">&quot;Austin&quot;</span>;\nb.value -= <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-built_in\">console</span>.log(b);           <span class=\"hljs-comment\">// Object { value: 1, foo: &quot;bar&quot;, name: &quot;Austin&quot; }</span>\n</code></pre>\n<p>Objects properties can point to functions and functions themselves are even objects.</p>\n<pre><code class=\"hljs language-js\">b.sayHello = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;Hello, my name is&quot;</span>, b.name);\n}\n\nb.sayHello.help = <span class=\"hljs-string\">&quot;This prints the name property of the caller&quot;</span>\n</code></pre>\n<p>And yes, Objects can point to themselves.</p>\n<pre><code class=\"hljs language-js\">b.b = b\nb.b.b.b.b.b.b.sayHello()    <span class=\"hljs-comment\">// &quot;Hello my name is Austin&quot;</span>\n</code></pre>\n<h1>&quot;Classes&quot;</h1>\n<p>Javascript is NOT an object-oriented language so there are no real classes, but we often like to have object-like behavior. Here are three ways to accomplish that. Personally, I like the use of closures, but if you&#x27;re new to Javascript, using ES6 classes will probably be the easiest transition. The second method is unfortunately used very often and can lead to many annoying bugs if you&#x27;re not careful.</p>\n<h2>ES6 Classes</h2>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name, phonenumber</span>)</span> {\n    <span class=\"hljs-comment\">// if we want to access these later, we need to bind them to &#x27;this&#x27;</span>\n    <span class=\"hljs-built_in\">this</span>.createdAt = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();\n    <span class=\"hljs-built_in\">this</span>.name = name;\n    <span class=\"hljs-built_in\">this</span>.phonenumber = phonenumber;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">getName</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.name;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">setName</span>(<span class=\"hljs-params\">newName</span>)</span> {\n    <span class=\"hljs-built_in\">this</span>.name = newName;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">getAge</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>() - <span class=\"hljs-built_in\">this</span>.createdAt;\n  }\n}\n\n<span class=\"hljs-comment\">// Usage:</span>\n<span class=\"hljs-keyword\">var</span> person = <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&quot;Austin&quot;</span>, <span class=\"hljs-string\">&quot;555-555-5555&quot;</span>);\n<span class=\"hljs-built_in\">console</span>.log(person.name)              <span class=\"hljs-comment\">// Austin</span>\nperson.setName(<span class=\"hljs-string\">&quot;Austin Eng&quot;</span>)\n<span class=\"hljs-built_in\">console</span>.log(person.getName())         <span class=\"hljs-comment\">// Austin Eng</span>\n</code></pre>\n<h2>How it Actually Works (Sort of)</h2>\n<p>As I said earlier, Javascript is not actually an object-oriented language, so if you do the above without knowing the underlying implementation, you may run into strange bugs and problems.\nIf we want to get a better understanding of the Javascript, this is how you would implement the same functionality.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> Person = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">name, phonenumber</span>) </span>{\n  <span class=\"hljs-built_in\">this</span>.createdAt = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();          <span class=\"hljs-comment\">// will not be directly accessible because it&#x27;s not bound to &quot;this&quot;</span>\n  <span class=\"hljs-built_in\">this</span>.name = name;\n  <span class=\"hljs-built_in\">this</span>.phonenumber = phonenumber;\n}\n\nPerson.prototype.getName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.name;\n}\n\nPerson.prototype.setName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">newName</span>) </span>{\n  <span class=\"hljs-built_in\">this</span>.name = newName;\n}\n\nPerson.prototype.getAge = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>() - <span class=\"hljs-built_in\">this</span>.createdAt;\n}\n\n<span class=\"hljs-comment\">// Usage:</span>\n<span class=\"hljs-keyword\">var</span> person = <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&quot;Austin&quot;</span>, <span class=\"hljs-string\">&quot;555-555-5555&quot;</span>);\n<span class=\"hljs-built_in\">console</span>.log(person.name)              <span class=\"hljs-comment\">// Austin</span>\nperson.setName(<span class=\"hljs-string\">&quot;Austin Eng&quot;</span>)\n<span class=\"hljs-built_in\">console</span>.log(person.getName())         <span class=\"hljs-comment\">// Austin Eng</span>\n</code></pre>\n<h3>What is this <code>prototype</code> nonsense?</h3>\n<p>Javascript is not object-oriented. It is prototype-based. A <code>prototype</code> is another object from which an object inherits properties. Again, this is not a class because an object&#x27;s prototype is a <strong>specific object</strong>. When you try to access a property of an object, if it is not defined, then the Javascript engine will look at the object&#x27;s prototype. If it is not defined there, it will look at the object&#x27;s prototype&#x27;s prototype. This is what we call a <strong>prototype chain</strong>. In the above example, we define three functions: <code>getName</code>, <code>setName</code>, and <code>getAge</code> on the Person object. Remember: Person is a Function which is an Object. When we create an object with the <code>new</code> keyword, the result&#x27;s <code>prototype</code> is automatically set to <code>Person.prototype</code>. Therefore, the resulting object from <code>var person = new Person(&quot;Austin&quot;, &quot;555-555-5555&quot;);</code> does not have any properties called <code>getName</code>, <code>setName</code>, or <code>getAge</code>. It instead has a reference to the <code>Person</code> function. i.e. <code>person.__proto__ === Person</code>.</p>\n<p>There&#x27;s a lot more special things you can do with defining object properties (like special getters and setters) but it&#x27;s not totally necessary and not essential.</p>\n<h1>Javascript Modules</h1>\n<p>One of the nicer and newer features of Javascript is that we can have modules and separate our code into different files. Yay organized code! Anything prefaced by <code>export</code> will be exported from the module so that it can be accessed elsewhere like so:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> {thing1, thing2} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./path/to/Module.js&#x27;</span>\n</code></pre>\n<p>Using <code>export default</code> will be the export if curly braces are not used in the import.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> Module <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./path/to/Module.js&#x27;</span>\n</code></pre>\n<p>Let&#x27;s just jump straight into an example.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// MathLib.js</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> PI = <span class=\"hljs-number\">3.14159265</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">toRadians</span>(<span class=\"hljs-params\">degrees</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> degrees * PI / <span class=\"hljs-number\">180</span>;\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">toDegrees</span>(<span class=\"hljs-params\">radians</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> radians * <span class=\"hljs-number\">180</span> / PI;\n}\n\n</code></pre>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Person.js</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name</span>)</span> {\n    <span class=\"hljs-built_in\">this</span>.name = name;\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">sayHello</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;Hello my name is&quot;</span>, <span class=\"hljs-built_in\">this</span>.name);\n  }\n}\n\n</code></pre>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// main.js</span>\n<span class=\"hljs-keyword\">import</span> {PI} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./MathLib.js&#x27;</span>\n<span class=\"hljs-keyword\">import</span> Person <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./Person.js&#x27;</span>\n\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;The value of pi is:&quot;</span>, PI);\n<span class=\"hljs-keyword\">var</span> austin = <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&quot;Austin&quot;</span>);\naustin.sayHello();\n\n</code></pre>\n<h1>Callback Functions</h1>\n<p>Callback functions are used very often in Javascript, often when dealing with events. Because Javascript code in a browser is <strong>single threaded</strong>, but we want it to execute as fast as possible, modern Javascript engines are <strong>asynchronous</strong>. As a result, we often register &quot;callback functions&quot;. These are functions that are called when the result of some other operation has completed. This is very often used for handling events.</p>\n<p>Here&#x27;s a simple example</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">thing</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;second&quot;</span>);\n}\n\n<span class=\"hljs-built_in\">window</span>.setTimeout(thing, <span class=\"hljs-number\">1000</span>);\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;first&quot;</span>);\n</code></pre>\n<p>This code will print &quot;first&quot; and then print &quot;second&quot; one second later. <code>setTimeout</code> takes in a function and the number of milliseconds to wait before calling that function again. Here&#x27;s a much more common way to write the same code.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">window</span>.setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;second&quot;</span>)\n}, <span class=\"hljs-number\">1000</span>);\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;first&quot;</span>);\n</code></pre>\n<p>Note that the function here is not named. This is what we call an &quot;anonymous&quot; function. If that&#x27;s confusing, here&#x27;s something else we often use for animation loops.</p>\n<pre><code class=\"hljs language-javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">tick</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// draw stuff</span>\n  <span class=\"hljs-built_in\">window</span>.requestAnimationFrame(tick);\n})();\n</code></pre>\n<p>Here, we&#x27;re creating a function called tick which will pass itself as a callback to <code>requestAnimationFrame</code>. This, whenever the browser is ready to draw, will call <code>tick</code> again. We wrap this all in parentheses and put <code>()</code> afterwards to call <code>tick()</code> for the first time.</p>\n<p>Here&#x27;s another example of callback functions for event handling</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;You clicked:&quot;</span>, event.screenX, event.screenY);\n});\n</code></pre>\n<p>Here, <code>addEventListener</code> takes as parameters the name of the event to listen for and the function to execute when that event happens.</p>"},{"slug":"glsl-reference","frontmatter":{"type":"link","title":"GLSL Reference","href":"https://learnopengl.com/Getting-started/Shaders","rank":2},"content":""},{"slug":"graph-toy","frontmatter":{"type":"link","title":"GraphToy","href":"https://graphtoy.com/","rank":3},"content":""},{"slug":"shader-toy","frontmatter":{"type":"link","title":"ShaderToy","href":"https://www.shadertoy.com/","rank":4},"content":""}]}]},"__N_SSG":true}